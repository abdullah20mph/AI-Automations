{
  "name": "Anthony's Peronsal lead automation",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "67663dae-36b5-4553-aa13-89bc18963b66",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1,
      "position": [
        -48,
        352
      ],
      "webhookId": "your-webhook-id",
      "credentials": {
        "telegramApi": {
          "id": "jAf8PtjIUvwkXlem",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.message.text }}",
              "operation": "startsWith",
              "value2": "/start"
            }
          ]
        }
      },
      "id": "be11b7c5-29c5-4103-9a1f-acfbd1186d14",
      "name": "Check Start Command",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        176,
        352
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $json.message.chat.id }}",
        "text": "Welcome! üëã This is Anthony's lead automation.\n\nPlease provide lead details in this format:\nName, Email, Phone, Company, Note\n\nExample: John Doe, john@company.com, +1234567890, ABC Corp, Met at networking event\n\nUse \"none\" for any field you don't have.",
        "additionalFields": {}
      },
      "id": "f9bf5b33-0d3c-4e3f-b25c-841943a52274",
      "name": "Send Welcome Message",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        368,
        240
      ],
      "webhookId": "15912d98-2c91-43be-a6d2-bbdadd8cbf9f",
      "credentials": {
        "telegramApi": {
          "id": "jAf8PtjIUvwkXlem",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.message.text }}",
              "operation": "contains",
              "value2": ","
            }
          ]
        }
      },
      "id": "1df05ffe-8a63-4724-86a9-20f639ad5189",
      "name": "Check Lead Data Format",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        400,
        560
      ]
    },
    {
      "parameters": {
        "functionCode": "// Extract lead information from Telegram message in comma-separated format\nconst message = $input.first().json.message.text;\nconst chatId = $input.first().json.message.chat.id;\nconst userId = $input.first().json.message.from.id;\n\n// Split by comma and clean up each field\nconst fields = message.split(',').map(field => field.trim());\n\n// Expected format: name, email, phone, company, note\nconst leadData = {\n  telegram_chat_id: chatId,\n  telegram_user_id: userId,\n  submitted_at: new Date().toISOString(),\n  name: fields[0] || '',\n  email: fields[1] || '',\n  phone: fields[2] || '',\n  company: fields[3] || '',\n  note: fields[4] || ''\n};\n\n// Validate required fields\nif (!leadData.name || leadData.name.toLowerCase() === 'none') {\n  return [{\n    json: {\n      error: true,\n      message: 'Name is required. Please use format: Name, Email, Phone, Company, Note'\n    }\n  }];\n}\n\nif (!leadData.email || leadData.email.toLowerCase() === 'none') {\n  return [{\n    json: {\n      error: true,\n      message: 'Email is required. Please use format: Name, Email, Phone, Company, Note'\n    }\n  }];\n}\n\n// Email validation\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\nif (!emailRegex.test(leadData.email)) {\n  return [{\n    json: {\n      error: true,\n      message: 'Please provide a valid email address. Format: Name, Email, Phone, Company, Note'\n    }\n  }];\n}\n\n// Clean up \"none\" values\nif (leadData.phone.toLowerCase() === 'none') leadData.phone = '';\nif (leadData.company.toLowerCase() === 'none') leadData.company = '';\nif (leadData.note.toLowerCase() === 'none') leadData.note = '';\n\nreturn [{\n  json: leadData\n}];"
      },
      "id": "55fa82d9-befd-4bcb-af66-2661e72151cf",
      "name": "Parse Lead Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        576,
        544
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.error }}",
              "value2": true
            }
          ]
        }
      },
      "id": "afb8c444-516d-4002-80a9-104b29035a84",
      "name": "Check Validation Error",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        768,
        544
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $json.telegram_chat_id }}",
        "text": "‚ùå {{ $json.message }}\n\nPlease try again with the correct format.",
        "additionalFields": {}
      },
      "id": "79371427-4f6b-4597-9f75-2c08b4f49800",
      "name": "Send Error Message",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        976,
        432
      ],
      "webhookId": "2f2c6f5f-d2f3-4ce6-9c53-2ecdfd3ccad9",
      "credentials": {
        "telegramApi": {
          "id": "jAf8PtjIUvwkXlem",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1yO-QH-5bmTHaJXFFHPOXmqfMDDcXYuXSwMnH__024yE",
          "mode": "list",
          "cachedResultName": "Anthony Lead Assistant",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1yO-QH-5bmTHaJXFFHPOXmqfMDDcXYuXSwMnH__024yE/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1yO-QH-5bmTHaJXFFHPOXmqfMDDcXYuXSwMnH__024yE/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Name": "={{ $json.name }}",
            "Email": "={{ $json.email }}",
            "Phone": "={{ $json.phone }}",
            "Company": "={{ $json.company }}",
            "Note": "={{ $json.note }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Name",
              "displayName": "Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Email",
              "displayName": "Email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Company",
              "displayName": "Company",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Note",
              "displayName": "Note",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "d8251e9b-5a54-41eb-a453-34061ba326e1",
      "name": "Add to Google Sheet",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        976,
        672
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "ejMAa3kWuTzpFY5r",
          "name": "Google Sheets Anthony Personal"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "email": "={{ $json.Email }}",
        "additionalFields": {
          "companyName": "={{ $json.Company }}",
          "customPropertiesUi": {
            "customPropertiesValues": [
              {
                "property": "note",
                "value": "={{ $json.Note }}"
              }
            ]
          },
          "firstName": "={{ $json.Name }}",
          "memberEmail": "={{ $json.Email }}",
          "phoneNumber": "={{ $json.Phone }}"
        },
        "options": {}
      },
      "id": "66f9da8b-fb2c-4514-ac69-ecffe4a4f625",
      "name": "Create HubSpot Contact",
      "type": "n8n-nodes-base.hubspot",
      "typeVersion": 2,
      "position": [
        1136,
        672
      ],
      "credentials": {
        "hubspotOAuth2Api": {
          "id": "Ajc7I3GXf290fasi",
          "name": "HubSpot account 3"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "=‚úÖ Thank you ! \nThe info that includes:\nName: {{ $('Add to Google Sheet').item.json.Name }}\nEmail: {{ $('Add to Google Sheet').item.json.Email }}\nPhone: {{ $('Add to Google Sheet').item.json.Phone }}\nCompany: {{ $('Add to Google Sheet').item.json.Company }}\nNote: {{ $('Add to Google Sheet').item.json.Note }}",
        "additionalFields": {}
      },
      "id": "528000c9-c1c5-4903-bb7a-ef26d401fed1",
      "name": "Send Confirmation",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        2608,
        816
      ],
      "webhookId": "097639ef-027d-4ea7-84e3-de37759241cd",
      "credentials": {
        "telegramApi": {
          "id": "jAf8PtjIUvwkXlem",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.message.chat.id }}",
        "text": "Please use this exact format:\nName, Email, Phone, Company, Note\n\nExample: \nJohn Doe, john@company.com, +1234567890, ABC Corp, Met at conference\n\nUse \"none\" for missing information. Name and Email are required! üìù",
        "additionalFields": {}
      },
      "id": "8b36f24d-e5d0-4ed9-bf4d-b1ae7262ea15",
      "name": "Send Format Help",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        576,
        352
      ],
      "webhookId": "a5bdd064-00d7-4055-9530-f804c0364e0c",
      "credentials": {
        "telegramApi": {
          "id": "jAf8PtjIUvwkXlem",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {},
      "id": "022c2ec2-6993-488a-924b-4bc2e83194cb",
      "name": "CSV Import Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -48,
        848
      ],
      "disabled": true
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": "your-csv-file-id",
        "options": {
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "txt"
            }
          }
        }
      },
      "id": "994479c6-f1e2-4595-a673-e1aeaf3b89b7",
      "name": "Download CSV from Drive",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        160,
        848
      ],
      "disabled": true
    },
    {
      "parameters": {
        "functionCode": "// Parse CSV data and prepare for HubSpot\nconst csvData = $input.first().binary.data.data;\nconst csvText = Buffer.from(csvData, 'base64').toString('utf8');\n\n// Simple CSV parsing\nconst lines = csvText.split('\\n').filter(line => line.trim());\nconst headers = lines[0].split(',').map(h => h.trim().toLowerCase());\nconst contacts = [];\n\nfor (let i = 1; i < lines.length; i++) {\n  const values = lines[i].split(',').map(v => v.trim().replace(/\"/g, ''));\n  \n  if (values.length >= headers.length) {\n    const contact = {};\n    headers.forEach((header, index) => {\n      contact[header] = values[index] || '';\n    });\n    \n    // Validate email\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (contact.email && emailRegex.test(contact.email)) {\n      contacts.push({\n        firstname: contact.name ? contact.name.split(' ')[0] : contact.firstname || '',\n        lastname: contact.name ? contact.name.split(' ').slice(1).join(' ') : contact.lastname || '',\n        email: contact.email,\n        phone: contact.phone || '',\n        company: contact.company || '',\n        lifecyclestage: 'lead',\n        lead_source: 'CSV Import',\n        import_date: new Date().toISOString()\n      });\n    }\n  }\n}\n\nreturn contacts.map(contact => ({ json: contact }));"
      },
      "id": "bd0953fa-8092-4826-9eee-c02077b4f38f",
      "name": "Parse CSV Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        352,
        848
      ],
      "disabled": true
    },
    {
      "parameters": {
        "operation": "create"
      },
      "id": "2069a9a9-2fdd-451b-8e25-1cd7c9e59fea",
      "name": "Bulk Create HubSpot Contacts",
      "type": "n8n-nodes-base.hubspot",
      "typeVersion": 2,
      "position": [
        560,
        848
      ],
      "disabled": true
    },
    {
      "parameters": {
        "functionCode": "// Prepare summary of import results\nconst items = $input.all();\nconst successful = items.filter(item => !item.json.error).length;\nconst failed = items.filter(item => item.json.error).length;\nconst total = items.length;\n\nreturn [{\n  json: {\n    total_processed: total,\n    successful_imports: successful,\n    failed_imports: failed,\n    import_date: new Date().toISOString(),\n    success_rate: total > 0 ? ((successful / total) * 100).toFixed(2) + '%' : '0%'\n  }\n}];"
      },
      "id": "faf902a2-23e6-4137-9a6f-fa20af1eeb4f",
      "name": "Prepare Import Summary",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        752,
        848
      ],
      "disabled": true
    },
    {
      "parameters": {
        "sendTo": "={{ $('Parse Lead Data').item.json.email }}",
        "subject": " Hey¬†it‚Äôs¬†Anthony!",
        "message": "=<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hey! Good meeting you</title>\n    <style>\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            line-height: 1.6;\n            margin: 0;\n            padding: 40px 20px;\n            background-color: #fafafa;\n            color: #333;\n        }\n        .email-container {\n            max-width: 500px;\n            margin: 0 auto;\n            background-color: #ffffff;\n            border-radius: 12px;\n            padding: 40px;\n            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n        }\n        h1 {\n            font-size: 24px;\n            font-weight: 600;\n            color: #2c3e50;\n            margin: 0 0 30px 0;\n            text-align: center;\n        }\n        p {\n            margin: 20px 0;\n            font-size: 16px;\n            color: #555;\n        }\n        .greeting {\n            font-size: 18px;\n            color: #2c3e50;\n        }\n        a {\n            color: #3498db;\n            text-decoration: none;\n            font-weight: 500;\n        }\n        a:hover {\n            color: #2980b9;\n        }\n        .links {\n            background-color: #f8f9fa;\n            border-radius: 8px;\n            padding: 20px;\n            margin: 25px 0;\n            border-left: 3px solid #3498db;\n        }\n        .signature {\n            margin-top: 35px;\n            padding-top: 25px;\n            border-top: 1px solid #eee;\n            text-align: center;\n        }\n        .name {\n            font-weight: 600;\n            color: #2c3e50;\n            margin-bottom: 5px;\n        }\n        .company {\n            color: #3498db;\n            font-size: 15px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"email-container\">\n        <h1>Great meeting you!</h1>\n        \n        <p class=\"greeting\">Hey {{ $('Parse Lead Data').item.json.name }} ,</p>\n        \n        <p>Nice to meet you!</p>\n        \n        <p>If we talked about me sending over some info on what I do, I'll shoot that your way soon. If not, no worries ‚Äì hit me up with any questions.</p>\n        \n        <p>Just reply here or text me: <a href=\"tel:+19543940019\">954-394-0019</a></p>\n        \n        <div class=\"links\">\n            <p style=\"margin: 0 0 10px 0;\"><strong>Check out my stuff:</strong></p>\n            <p style=\"margin: 8px 0;\">Instagram: <a href=\"https://instagram.com/allistarfilms\" target=\"_blank\">@allistarfilms</a></p>\n            <p style=\"margin: 8px 0;\">Website: <a href=\"https://www.allistarmedia.io\" target=\"_blank\">www.allistarmedia.io</a></p>\n        </div>\n        \n        <p>Talk soon!</p>\n        \n        <div class=\"signature\">\n            <p class=\"name\">Anthony Arias</p>\n            <p class=\"company\">Allistar Media</p>\n        </div>\n    </div>\n</body>\n</html>",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2368,
        816
      ],
      "id": "d3884b7c-02c1-413d-87ac-5924dfefb7d4",
      "name": "Send a message",
      "webhookId": "72d91ed3-d3cc-4dab-9693-106adc436754",
      "credentials": {
        "gmailOAuth2": {
          "id": "RTWVr0r7TNERKiLG",
          "name": "Gmail Anthony"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://wasenderapi.com/api/send-message",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $('Parse Lead Data').item.json.phone }}"
            },
            {
              "name": "text",
              "value": "={{ $json.content.parts[0].text }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2112,
        816
      ],
      "id": "d071cd29-ebf3-4937-9b50-854e0620ccfc",
      "name": "Send welcome message Wapp1",
      "credentials": {
        "httpHeaderAuth": {
          "id": "tUlXzZt0XA76894F",
          "name": "Header Auth account 3"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-pro",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-pro"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a messaging assistant for Anthony from Allistar Media. Create casual, natural WhatsApp messages that sound like you're just confirming you got their info - NOT trying to sell anything.\nINPUT:\n\nClient Note: \"{{ $('Parse Lead Data').item.json.note }}\"\n\nClient Name: \"{{ $('Parse Lead Data').item.json.name }}\"\n\nCORE RULES:\n\nIf note is in Spanish, respond in Spanish\nIf note is unclear/empty, use generic message\nKeep it SHORT (under 120 characters)\nSound like you're just letting them know you got their number\nNO sales language, NO excessive enthusiasm, NO trying to impress\n\nTONE: Casual friend confirming plans - not a salesperson\nGENERIC MESSAGE (for unclear/empty notes):\n\"Hey {{ $('Parse Lead Data').item.json.name }}, it's Anthony! Got you locked in üôåüèº IG @allistarfilms www.allistarmedia.io\"\nPERSONALIZED MESSAGE FORMULA:\n\"Hey [name], it's Anthony! [Simple acknowledgment of their project]. Got you locked in üôåüèº IG @allistarfilms www.allistarmedia.io\"\nIMPROVED EXAMPLES:\nWedding/Events:\n\n\"Needs wedding videography for June 2025\" ‚Üí \"Hey [name], it's Anthony! June wedding, nice. Got you locked in üôåüèº IG @allistarfilms www.allistarmedia.io\"\n\"Quincea√±era planning\" ‚Üí \"Hey [name], it's Anthony! Quincea√±era season. Got you locked in üôåüèº IG @allistarfilms www.allistarmedia.io\"\n\"Corporate retreat filming\" ‚Üí \"Hey [name], it's Anthony! Corporate retreat noted. Got you locked in üôåüèº IG @allistarfilms www.allistarmedia.io\"\n\nBusiness/Commercial:\n\n\"Restaurant social media content\" ‚Üí \"Hey [name], it's Anthony! Restaurant content, cool. Got you locked in üôåüèº IG @allistarfilms www.allistarmedia.io\"\n\"Music video for hip-hop artist\" ‚Üí \"Hey [name], it's Anthony! Hip-hop video, bet. Got you locked in üôåüèº IG @allistarfilms www.allistarmedia.io\"\n\"Real estate showcase\" ‚Üí \"Hey [name], it's Anthony! Real estate stuff. Got you locked in üôåüèº IG @allistarfilms www.allistarmedia.io\"\n\nSpanish Examples:\n\n\"Video para boda\" ‚Üí \"¬°Hola [name], soy Anthony! Video de boda, perfecto. Ya te tengo üôåüèº IG @allistarfilms www.allistarmedia.io\"\n\"Contenido para redes\" ‚Üí \"¬°Hola [name], soy Anthony! Contenido para redes, √≥rale. Ya te tengo üôåüèº IG @allistarfilms www.allistarmedia.io\"\n\n"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        1312,
        784
      ],
      "id": "8f144239-9a60-47e1-9bf3-76baef66dcee",
      "name": "Message a model",
      "retryOnFail": true,
      "maxTries": 2,
      "credentials": {
        "googlePalmApi": {
          "id": "pOE5kOJYAslbGsni",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a73bc471-56f8-4a9d-be66-91dcd4ff1d87",
              "leftValue": "={{ $json.error }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1664,
        784
      ],
      "id": "e871d0a1-458f-4e73-b8d8-89b704c60121",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "// Fallback message generator when Gemini fails\nconst leadData = $('Parse Lead Data').first().json;\nconst name = leadData.name || 'there';\nconst note = leadData.note || '';\n\n// Simple fallback logic based on keywords\nlet message;\n\n// Check if note suggests Spanish\nif (note.toLowerCase().includes('espa√±ol') || \n    note.toLowerCase().includes('boda') ||\n    note.toLowerCase().includes('quincea√±era') ||\n    note.toLowerCase().includes('para') ||\n    note.toLowerCase().includes('video para')) {\n  message = `¬°Hola ${name}, soy Anthony! Ya te tengo üôåüèº IG @allistarfilms www.allistarmedia.io`;\n} \n// English responses with simple personalization\nelse if (note.toLowerCase().includes('wedding')) {\n  message = `Hey ${name}, it's Anthony! Wedding stuff, nice. Got you locked in üôåüèº IG @allistarfilms www.allistarmedia.io`;\n} else if (note.toLowerCase().includes('music')) {\n  message = `Hey ${name}, it's Anthony! Music video, bet. Got you locked in üôåüèº IG @allistarfilms www.allistarmedia.io`;\n} else if (note.toLowerCase().includes('business') || note.toLowerCase().includes('commercial')) {\n  message = `Hey ${name}, it's Anthony! Business content, cool. Got you locked in üôåüèº IG @allistarfilms www.allistarmedia.io`;\n} else if (note.toLowerCase().includes('real estate')) {\n  message = `Hey ${name}, it's Anthony! Real estate stuff. Got you locked in üôåüèº IG @allistarfilms www.allistarmedia.io`;\n} else {\n  // Generic fallback\n  message = `Hey ${name}, it's Anthony! Got you locked in üôåüèº IG @allistarfilms www.allistarmedia.io`;\n}\n\nreturn [{\n  content: {\n    parts: [{\n      text: message\n    }]\n  },\n  fallback_used: true\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1952,
        464
      ],
      "id": "026db650-2c5b-4520-9795-d2f311549a33",
      "name": "Code"
    },
    {
      "parameters": {
        "content": "## Telegram Lead Automation Flow Documentation\n\n**Overview**\nThis n8n workflow automates lead capture through a Telegram bot, processes the information, stores it in multiple systems, and sends personalized follow-up messages via WhatsApp and email.\n\n6. Validation Error Handling\n\nIf validation fails: Sends error message back to Telegram\nIf validation passes: Continues to data storage\n\n7. Data Storage (Parallel Processing)\nGoogle Sheets Integration\n\nAppends lead data to specified Google Sheet\nColumns: Name, Email, Phone, Company, Note\n\nHubSpot CRM Integration\n\nCreates new contact in HubSpot\nMaps data to CRM fields\nSets lifecycle stage as \"lead\"\n\n8. AI-Powered WhatsApp Message Generation\nUses Google Gemini AI to create personalized messages:\nAI Prompt Logic:\n\nAnalyzes the \"Note\" field for context\nDetects language (Spanish/English)\nGenerates casual, non-salesy confirmation messages\nIncludes Anthony's social media links\n\nMessage Examples:\n\nWedding: \"Hey John, it's Anthony! June wedding, nice. Got you locked in üôåüèº\"\nSpanish: \"¬°Hola Maria, soy Anthony! Video de boda, perfecto. Ya te tengo üôåüèº\"\n\n9. Fallback Message System\nIf AI fails, uses JavaScript code to generate basic messages:\n\nKeyword detection for personalization\nLanguage detection for Spanish responses\nGeneric fallback for unclear notes\n\n10. WhatsApp Integration\n\nSends personalized message via Wasender API\nUses the lead's phone number\nIncludes Instagram and website links\n\n11. Email Follow-up\nSends HTML-formatted email with:\n\nPersonalized greeting using lead's name\nProfessional email template\nContact information and social media links\nClean, mobile-responsive design\n\n12. Telegram Confirmation\nSends final confirmation to original Telegram chat with summary:",
        "height": 1200,
        "width": 640
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2880,
        128
      ],
      "id": "ad7c5825-20c5-4ef6-8f4d-b395d950dacb",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Main Flow Process\n1. Telegram Bot Trigger\n\nListens for incoming messages on Telegram\nActivated when users interact with the bot\n\n2. Start Command Handler\n\nChecks if message begins with /start\nIf YES: Sends welcome message with instructions\nIf NO: Proceeds to lead data processing\n\n3. Welcome Message\nThe bot sends formatting instructions:\nWelcome! üëã This is Anthony's lead automation.\n\nPlease provide lead details in this format:\nName, Email, Phone, Company, Note\n\nExample: John Doe, john@company.com, +1234567890, ABC Corp, Met at networking event\n\nUse \"none\" for any field you don't have.\n4. Data Format Validation\n\nChecks if message contains commas (indicating proper format)\nIf NO: Sends format help message\nIf YES: Proceeds to data parsing\n\n5. Lead Data Parsing\nExtracts and validates information:\n\nSplits message by commas\nMaps to fields: Name, Email, Phone, Company, Note\nRequired fields: Name and Email\nEmail validation: Checks for valid email format\nConverts \"none\" entries to empty strings\n",
        "height": 1168,
        "width": 576,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -768,
        144
      ],
      "id": "e7a98351-5b8e-48ce-a147-7bf8900b2ac6",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "\n",
        "height": 1104,
        "width": 2880,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -96,
        176
      ],
      "id": "f26e2128-4ea3-4b69-b0bc-a77057d46438",
      "name": "Sticky Note2"
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Check Start Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Start Command": {
      "main": [
        [
          {
            "node": "Send Welcome Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Lead Data Format",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Lead Data Format": {
      "main": [
        [
          {
            "node": "Parse Lead Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Format Help",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Lead Data": {
      "main": [
        [
          {
            "node": "Check Validation Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Validation Error": {
      "main": [
        [
          {
            "node": "Send Error Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Add to Google Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add to Google Sheet": {
      "main": [
        [
          {
            "node": "Create HubSpot Contact",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create HubSpot Contact": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CSV Import Trigger": {
      "main": [
        [
          {
            "node": "Download CSV from Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download CSV from Drive": {
      "main": [
        [
          {
            "node": "Parse CSV Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse CSV Data": {
      "main": [
        [
          {
            "node": "Bulk Create HubSpot Contacts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Bulk Create HubSpot Contacts": {
      "main": [
        [
          {
            "node": "Prepare Import Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a message": {
      "main": [
        [
          {
            "node": "Send Confirmation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send welcome message Wapp1": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send welcome message Wapp1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Send welcome message Wapp1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a1d42cae-3d12-407f-9f0a-8206b67bd10d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "fb8b211dfa388d0801350a6c5b17c205d694932f4fa50fa723c269df3e6279eb"
  },
  "id": "L0xom10NacMCmyIc",
  "tags": []
}